{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "IPRangesS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "IPRangesFnRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" ],
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "*",
                  "Resource": [
                    {
                      "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "IPRangesS3Bucket" } ] ]
                    },
                    {
                      "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "IPRangesS3Bucket" }, "/*" ] ]
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "Version1": {
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "Description": "First version",
        "FunctionName": {
          "Ref": "StoreIPRangesFunction"
        }
      }
    },
    "StoreIPRangesFnProd": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "FunctionVersion": {
          "Fn::GetAtt": [
            "Version1",
            "Version"
          ]
        },
        "FunctionName": {
          "Ref": "StoreIPRangesFunction"
        },
        "Name": "PROD"
      }
    },
    "IPRangesSubscription": {
      "DependsOn": [
        "StoreIPRangesFnProd",
        "SNSInvokeLambdaPermission"
      ],
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Ref": "StoreIPRangesFnProd"
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {"Ref": "AWS::Region"},
              {"Ref": "AWSAccountID"},
              {"Ref": "TopicName"}
            ]
          ]
        }
      }
    },
    "SNSInvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "StoreIPRangesFnProd"
        },
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {"Ref": "AWS::Region"},
              {"Ref": "AWSAccountID"},
              {"Ref": "TopicName"}
            ]
          ]
        },
        "Principal": "sns.amazonaws.com"
      }
    },
    "StoreIPRangesFunction": {
      "DependsOn": [
        "IPRangesS3Bucket",
        "IPRangesFnRole"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "S3Bucket": {
              "Ref": "IPRangesS3Bucket"
            }
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs4.3",
        "Role": {
          "Fn::GetAtt": [
            "IPRangesFnRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "'use strict';",
                "let https = require('https');",
                "let AWS = require('aws-sdk');",
                "let s3 = new AWS.S3();",
                "",
                "exports.handler = (event, context, callback) => {",
                "  let message = event.Records[0].Sns.Message;",
                "  if (typeof message === 'string') {",
                "    message = JSON.parse(message);",
                "  }",
                "  let url = message.url || \"https://ip-ranges.amazonaws.com/ip-ranges.json\";",
                "  console.log('Going to fetch ' + url);",
                "  https.get(url, function (res) {",
                "    res.setEncoding('utf8');",
                "    var rawData = '';",
                "    res.on('data', (chunk) => { rawData += chunk; });",
                "    res.on('end', () => {",
                "      let parsedData = JSON.parse(rawData);",
                "      //console.log(parsedData);",
                "      var params = {",
                "        \"Bucket\": process.env.S3Bucket,",
                "        \"Key\": `ipranges-${parsedData.syncToken}.json`,",
                "        \"Body\": rawData",
                "      };",
                "      s3.putObject(params, function(err, data) {",
                "        if (err) {",
                "          callback(err, err.stack); // an error occurred",
                "        } else {",
                "          callback(null,\"success\"); // successful response",
                "        }",
                "      });",
                "    });",
                "  });",
                "}"
              ]
            ]
          }
        }
      }
    }
  },
  "Parameters": {
    "AWSAccountID": {
      "Default": "806199016981",
      "MinLength": "12",
      "MaxLength": "12",
      "AllowedPattern": "[0-9]+",
      "ConstraintDescription": "AWS Account ID is exactly 12 numbers",
      "Description": "AWS account ID where SNS topic is located",
      "Type": "String"
    },
    "TopicName": {
      "Default": "AmazonIpSpaceChanged",
      "MinLength": "1",
      "Description": "Name of the topic",
      "Type": "String"
    }
  }
}
